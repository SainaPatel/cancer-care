
var express = require('express')
, routes = require('./routes')
, user = require('./routes/user')
,doctors=require('./routes/doctors')
,cam=require('./routes/cam')
, http = require('http')
, path = require('path')
, favicon = require('serve-favicon')
,	recommendation=require('./routes/recommendation')
,registration=require('./routes/registration')
,profile = require('./routes/profile')
,passport = require('passport')
,session = require('express-session')
,MongoStore=require('connect-mongo')(session)
,LocalStrategy = require('passport-local').Strategy;

var app = express();


//all environments
app.set('port', process.env.PORT || 3000);
app.set('views', __dirname + '/views');
app.set('view engine', 'ejs');
app.use(express.logger('dev'));
app.use(express.bodyParser());
app.use(express.methodOverride());

app.use(express.static(path.join(__dirname, 'public')));
app.use(favicon(path.join(__dirname,'public', 'favicon_cancer.ico')));


app.use(session({  
	store:new MongoStore({url:'mongodb://cmpe295:cmpe295@ds023500.mlab.com:23500/session',collection:'sessions'}),
	secret: "best project ever",
	resave: false,
	saveUninitialized: false
}));
app.use(passport.initialize());  
app.use(passport.session());

app.use(app.router);

//passport config
passport.serializeUser(function (user, done) {
	console.log("serializing " + user.email);
	done(null, user.email+" "+user.type);
});

passport.deserializeUser(function (email, done) {

	console.log("deserializing " + email);
	registration.findUserById(email, done);

	//done(null, user);
});

passport.use( new LocalStrategy({ passReqToCallback : true,usernameField: 'email'},
		function (req,email, password, done) {
	console.log(email+" | "+password);
	registration.findUser(email,password,req.body.type, function (err, user) {
		if (err) {
			return done(err);
		}
		if (!user) {
			return done(null, false);
		}
		return done(null, user);     
	});
}
));

//use later
passport.authenticationMiddleware = function() {
	return function (req, res, next) {
		if (req.isAuthenticated()) {
			return next();
		}
		res.redirect('/');
	};
};

//development only
if ('development' == app.get('env')) {
	app.use(express.errorHandler());
}
app.get('/', routes.index);
app.get('/users', user.list);
app.get('/radoninfo',recommendation.getRadonInfo);
app.get('/getArticles', passport.authenticationMiddleware(),recommendation.getArticles);
app.get('/radoninfoGeneral',recommendation.getRadonInfoGeneral);
app.get('/successLogin',function(req,res){
	res.status(200).send("success");
});
app.get('/faliureLogin',function(req,res){
	res.status(401).send("Unauthorized");
});
app.get('/patientProfile',passport.authenticationMiddleware(),function(req,res){
	res.render('patientProfile', { title: 'Circle of Hope', user: req.user });
});
app.get('/doctorProfile',passport.authenticationMiddleware(),function(req,res){
	res.render('doctorProfile', { title: 'Circle of Hope' });
});
app.post('/register',registration.patientRegister);
//app.post('/login',registration.login);
app.post('/login', passport.authenticate('local', {
	successRedirect: '/successLogin',
	failureRedirect: '/faliureLogin'
}));
app.get('/logout', function(req, res){
	var name = req.user.email;
	console.log("LOGGIN OUT " + name);
	req.logout();
	res.redirect('/');
});
app.post('/addFACTL',passport.authenticationMiddleware(),profile.addFACTL);
app.post('/doctorRegister',registration.doctorRegister);
app.post('/getDoctors',passport.authenticationMiddleware(),doctors.getDoctors);

app.get('/getProfileInfo',passport.authenticationMiddleware(),profile.getProfileInfo);
app.post('/updateProfileInfo',passport.authenticationMiddleware(),profile.updateProfileInfo);

app.post('/getDoctors',doctors.getDoctors);
app.get('/getRecommendations',cam.getRecommendations);
//app.get('/getFoodDetails',cam.getFoodDetails);
app.get('/getProfileInfo',profile.getProfileInfo);
app.post('/updateProfileInfo',profile.updateProfileInfo);
app.POST('/getTreatmentLocations',cam.getTreatmentLocations);
//app.get('/getLifestyleDetails',cam.getLifestyleDetails);

http.createServer(app).listen(app.get('port'), function(){
	console.log('Express server listening on port ' + app.get('port'));
});
